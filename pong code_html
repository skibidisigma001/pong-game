<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pong Game</title>
    <style>
        body { 
            margin: 0; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            height: 100vh; 
            background-color: #000; 
            color: white; 
        }
        canvas {
            background: #222;
        }
    </style>
</head>
<body>
    <canvas id="pongCanvas" width="800" height="400"></canvas>
    <script>
        const canvas = document.getElementById('pongCanvas');
        const ctx = canvas.getContext('2d');

        let paddleWidth = 10, paddleHeight = 100;
        let playerX = 0, playerY = canvas.height / 2 - paddleHeight / 2;
        let aiX = canvas.width - paddleWidth, aiY = canvas.height / 2 - paddleHeight / 2;
        let ballSize = 10, ballX = canvas.width / 2, ballY = canvas.height / 2, ballSpeedX = 4, ballSpeedY = 4;

        // Draw paddles and ball
        function draw() {
            // Clear the canvas
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Player paddle
            ctx.fillRect(playerX, playerY, paddleWidth, paddleHeight);

            // AI paddle
            ctx.fillRect(aiX, aiY, paddleWidth, paddleHeight);

            // Ball
            ctx.fillRect(ballX, ballY, ballSize, ballSize);
        }

        // Update the game objects
        function update() {
            // Move the ball
            ballX += ballSpeedX;
            ballY += ballSpeedY;

            // Bounce the ball off the top and bottom walls
            if (ballY <= 0 || ballY + ballSize >= canvas.height) {
                ballSpeedY = -ballSpeedY;
            }

            // Bounce the ball off the paddles
            if (ballX <= paddleWidth && ballY > playerY && ballY < playerY + paddleHeight) {
                ballSpeedX = -ballSpeedX;
            }
            if (ballX + ballSize >= canvas.width - paddleWidth && ballY > aiY && ballY < aiY + paddleHeight) {
                ballSpeedX = -ballSpeedX;
            }

            // Reset the ball if it goes off the screen
            if (ballX < 0 || ballX > canvas.width) {
                ballX = canvas.width / 2;
                ballY = canvas.height / 2;
                ballSpeedX = -ballSpeedX;
            }

            // Move the AI paddle
            aiY += (ballY - (aiY + paddleHeight / 2)) * 0.1;
        }

        // Control the player paddle
        canvas.addEventListener('mousemove', function (event) {
            const rect = canvas.getBoundingClientRect();
            playerY = event.clientY - rect.top - paddleHeight / 2;
        });

        // Game loop
        function gameLoop() {
            update();
            draw();
            requestAnimationFrame(gameLoop);
        }

        gameLoop();
    </script>
</body>
</html>
